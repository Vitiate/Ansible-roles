---

# This task is run if SSHNG_ROOT==yes. Applying keys to the root user
- name: "[roles/security/sshng/root-user]: Compile the public keys"
  local_action: "assemble src={{temp_git}} dest=/{{ pubfile }}"

- name: "[roles/security/sshng/root-user]: Check for host specific keys"
  local_action: "stat path={{temp_git}}/{{ inventory_hostname }}/"
  register: stat_result

- name: "[roles/security/sshng/root-user]: Compile host specific keys"
  local_action: "assemble src={{temp_git}}/{{ inventory_hostname }}/ dest={{ hostfile }}"
  when: stat_result.stat.exists == True

- name: "[roles/security/sshng/root-user]: Check for compiled host specific keyfile"
  local_action: "stat path={{ hostfile }}"
  register: stat_HCFile

- name: "[roles/security/sshng/root-user]: Compile master key file"
  local_action: "shell cat {{ hostfile }} >> {{ pubfile }}"
  when: stat_HCFile.stat.exists == True

- name: "[roles/security/sshng]: Update authorized_keys"
  authorized_key: user=root
                  key={{ lookup('file', pubfile) }}
                  manage_dir=no
                  exclusive=no
  register: result
- debug: var=result

#- name: "[roles/security/sshng]: Saving List of Pre-Existing authorized_keys to /tmp/{{ inventory_hostname }}.existing"
#  local_action: copy content={{ foo_result }} dest=/tmp/{{ inventory_hostname }}.existing

- name: "[roles/security/sshkeys]: Restore SELinux Context"
  file: path=/root/.ssh state=directory seuser=system_u serole=object_r setype=ssh_home_t
  file: path=/root/.ssh/authorized_keys  seuser=system_u serole=object_r setype=ssh_home_t